"""
Q : 원형 형태로 배치되어 있는 집들과 이 집들을 털려고 하는 도둑이 있다. 한 집을 털면 그 집에 있는 돈을 얻지만 인접한 양 옆의 집은 털지 못하게 된다.
    도둑이 최대한 많은 돈을 얻기 위해서는 어느 집을 털어야 하는가?


원형으로 배치된 집들의 한 부분을 잘라서 일자로 만들었다고 가정하자.
도둑은 0번째 집부터 순차적으로 이동하며 집을 털 것이다.

지금 도둑이 i번째 집에 있다.
지금까지 도둑이 얻은 돈의 최댓값은
(i-1)번째 집을 털었을 때와 털지 않았을 때로 나누어 생각할 수 있다.

만약 (i-1)번째 집을 털었다면, 도둑은 i번째 집을 털지 못한다.
따라서 도둑이 최대로 얻을 수 있는 돈은 (i-1)번째 집에 있을 때 도둑이 얻은 돈의 최댓값과 동일하다.

만약 (i-1)번째 집을 털지 않았다면, 도둑은 i번째 집을 털 수 있다.
따라서 도둑이 최대로 얻을 수 있는 돈은 (i-2)번째 집에 있을 때 도둑이 최대로 얻은 돈과 i번째 집에 있는 돈의 합과 동일하다.

그래서 현재 i번째 집에 있는 도둑이 얻을 수 있는 돈의 최댓값은, 위에서 구한 두 값 중에 더 큰 값이 된다.

그리고 맨 처음 집은 맨 마지막 집과 연결되어 있기 때문에, 첫 번째 집을 털 때와 털지 않을 때로 나누어 생각해야 한다.

만약 첫 번째 집을 털 경우, 마지막 집은 제외하고 계산해야 하며
첫 번째 집을 털지 않을 경우, 두 번째 집부터 마지막 집까지 계산해야 한다.

그렇게 두 가지 경우에서 최대값을 구한 다음, 두 값중 더 큰 값이 최종적으로 도둑이 얻을 수 있는 돈의 최댓값이 된다.

"""

def solution(money):
    h = len(money)
    M, m = [0]*(h-1), [0]*h
    M[0] = M[1] = money[0]
    for i in range(2,h-1):
        M[i] = max(money[i]+M[i-2], M[i-1])
    m[0], m[1] = 0, money[1]
    for j in range(2,h):
        m[j] = max(money[j]+m[j-2], m[j-1])
    return max(M[-1], m[-1])
