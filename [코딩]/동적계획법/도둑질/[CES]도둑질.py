def solution(money):
    dp1 = [0] * len(money)
    # 집을 무조건 털어야 하는 경우를 고려 -> 초기값 0으로 설정
    dp1[0] = money[0]
    # 첫 번째 집을 털 경우 dp1의 첫 번째 원소에 해당 집의 돈을 저장
    dp1[1] = max(money[0], money[1])
    # 두 번째 집을 털 경우, dp1의 두 번째 원소에 두 집 중에서 더 많은 돈을 저장

    for i in range(2, len(money)-1): 
    # 세 번째 집부터 마지막 직접 집까지 반복하는 루프 시작 
    # -> 이 루프는 첫 번째 집을 무조건 터는 경우를 고려
        dp1[i] = max(dp1[i-1], money[i]+dp1[i-2])
        # 현재 집을 털 경우 더 큰 값을 dq1[i]에 저장, dp1[i-1]은 이전 집을 털지 않았을 때의 최대 금액이고 money[i]+dp1[i+2]는 현재 집을 털 경우의 최대 금액
        
    dp2 = [0] * len(money)
    # 마지막 집을 무조건 털어야 하는 경우를 고려
    # -> 초기값 0으로 설정
    dp2[0] = 0
    # 첫 번째 집을 털 경우 dp2의 첫 번째 원소에 0을 저장
    dp2[1] = money[1]
    # 두 번째 집을 털 경우 dp2의 두 번째 원소에 두 번째 집의 돈을 저장

    for i in range(2, len(money)):
    # 세 번째 집부터 마지막 집까지 반복하는 루프 시작 
    # 이 루프는 마지막 집을 무조건 털어야 하는 경우 고려
    
        dp2[i] = max(dp2[i-1], money[i]+dp2[i-2])
        # 현재 집을 털 경우 더 큰 값을 저장, dp2[i-1]는 이전 집을 털지 않았을 때의 최대 금액이고 money[i]+dp2[i-2]는 현재 집을 털 경우의 최대 금액

    return max(max(dp1), max(dp2)) 
    # dp1과 dp2 중에서 더 큰 최대 금액을 선택하여 반환
    # -> 첫 집을 무조건 터는 경우와 마지막 집을 무조건 털어야 하는 경우 중에서 더 많은 돈을 털 수 있는 경우를 나타낸다
