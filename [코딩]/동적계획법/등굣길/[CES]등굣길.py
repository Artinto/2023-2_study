def solution(m, n, puddles):
    puddles = [[q,p] for [p,q] in puddles]   
    # 리스트에 있는 웅덩이의 좌표를 거꾸로 바꿔서 저장 -> [x, y]를 [y, x]로 변환 (나중에 좌표를 사용할 때 행과 열을 일관성있게 처리하기 위하여)
    dp = [[0] * (m + 1) for i in range(n + 1)]  
    # 2차원 dp테이블 dp를 초기화한다 -> n+1 행과 m+1의 열을 가지며 각 원소는 현재 위치까지 도달할 수 있는 경로의 수를 나타내고 모든 값을 0으로 초기화
    dp[1][1] = 1          
    # dp테이블의 첫 번째 행, 첫 번째 열의 원소를 1로 설정 (집의 시작 위치)
    for i in range(1, n + 1):
    # 1부터 n까지의 행에 대해 반복
        for j in range(1, m + 1):
        # 1부터 m까지의 열에 대해 반복
            if i == 1 and j == 1: continue 
            # 만약 현재 위치가 집이라면 다음 턴으로 넘어감
            if [i, j] in puddles:    
            # 현재위치가 웅덩이의 좌표라면
                dp[i][j] = 0
                # 0으로 설정
            else:         
            # 그게 아니라면
                dp[i][j] = (dp[i - 1][j] + dp[i][j - 1]) % 1000000007
                # 현재 위치의 dp[i][j]값을 왼쪽 칸과 위쪽 칸의 합으로 업데이트 -> 경로의 수가 큰 값을 다루기 위해 10000007로 나머지 연산을 수행한다
    return dp[n][m]
    # 테이블의 마지막 행과 열의 값을 반환
