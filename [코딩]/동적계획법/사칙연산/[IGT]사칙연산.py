"""
Q : 문자열 형태의 숫자와, 더하기 기호("+"), 뺄셈 기호("-")가 들어있는 배열 arr가 매개변수로 주어질 때
    서로 다른 연산순서의 계산 결과 중 최댓값을 return 하도록 solution 함수를 완성해 주세요.
    
input : ["5", "-", "3", "+", "1", "+", "2", "-", "9", "+", "4", "+", "6"]

연산식에 덧셈만 주어진 경우, 연산 순서는 계산 결과에 영향을 주지 않는다. 덧셈은 교환법칙이 성립하기 때문이다.

관건은 뺄셈이다.
A와 B가 양수이고 -A+B라는 식이 있을 때, -(A+B)보다 -A+B가 더 큰 값을 갖는다.
C가 양수이고 -A+B+C라는 식이 있을 때, -(A+B+C)보다 -A+B+C가 더 큰 값을 갖는다.
D가 양수이고 -A+B+C-D라는 식이 있을 때, -(A+B+C-D)보다 -A+B+C-D가 더 큰 값을 가질까?
-(A+B+C-D)를 풀어 쓰면 -A-B-C+D가 된다.
둘은 공통으로 -A를 갖지만, 차이점은 하나는 뒷부분이 (B+C)-D이고 다른 하나는 -(B+C)+D라는 것이다.
그리고 우리의 목표는 최대한 큰 값을 만드는 것이다.

-D를 X라고 치환해서 식을 다시 적으면
(B+C)+X 와 -(B+C)-X 가 된다.

(B+C)+X의 경우, X가 크면 클수록 전체 결과값은 커질 것이다.
-(B+C)-X의 경우, X가 작으면 작을수록 전체 결과값은 커질 것이다.

그런데 X의 값을 확정지을 수 없는 경우라면 어떻게 해야 하는가?
X의 값이 최대가 될 때와 최소가 될 때를 같이 구한 다음 각각 두 경우에 대입해 보면 된다.
X의 값이 최대가 될 때를 summax, 최소가 될 때를 summin이라고 하면
summax+B+C 와 (-summin)+(-B-C) 를 각각 계산해서 더 큰 값을 갖는 쪽을 선택하면 된다.
summin이 작으면 작을수록 -summin은 더 커지게 된다.

위에서 주어진 input을 다시 풀어 적으면

5-3+1+2-9+4+6

-3+1+2+X or -3-1-2-X

5-3+1+2-9+4+6-3+1+2-9+4+6-3+1+2-9+4+6-3+1+2-9+4+6⋯

"""


def solution(arr):
    summax = summin = s = 0
    for i in range(len(arr)-2, -1, -2):    # "+" or "-" ?
        if arr[i] == "+":
            s += int(arr[i+1])
        else:
            summax = max(-int(arr[i+1])-s-summin, -int(arr[i+1])+s+summax)
            summin -= (int(arr[i+1]) + s)
            s = 0
    return int(arr[0]) + s + summax
